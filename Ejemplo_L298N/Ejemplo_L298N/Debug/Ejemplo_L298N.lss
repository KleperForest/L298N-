
Ejemplo_L298N.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088a  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f8  00000000  00000000  00000ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032a  00000000  00000000  000011de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001508  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000112  00000000  00000000  0000195a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  78:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup_pins>:
#define EN_PIN  PB1

// Inicialización de pines
void setup_pins() {
	// Configuración de pines de control como salidas
	DDRD |= (1 << IN1_PIN) | (1 << IN2_PIN);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8c 60       	ori	r24, 0x0C	; 12
  84:	8a b9       	out	0x0a, r24	; 10
	// Configuración del pin EN como salida
	DDRB |= (1 << EN_PIN);
  86:	84 b1       	in	r24, 0x04	; 4
  88:	82 60       	ori	r24, 0x02	; 2
  8a:	84 b9       	out	0x04, r24	; 4

	// Inicializar pines en estado bajo
	PORTD &= ~(1 << IN1_PIN);
  8c:	8b b1       	in	r24, 0x0b	; 11
  8e:	8b 7f       	andi	r24, 0xFB	; 251
  90:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << IN2_PIN);
  92:	8b b1       	in	r24, 0x0b	; 11
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~(1 << EN_PIN);
  98:	85 b1       	in	r24, 0x05	; 5
  9a:	8d 7f       	andi	r24, 0xFD	; 253
  9c:	85 b9       	out	0x05, r24	; 5
  9e:	08 95       	ret

000000a0 <setup_pwm>:
}

// Inicialización de PWM en el pin EN
void setup_pwm() {
	// Configurar Timer1 para PWM en PB1 (OC1A)
	TCCR1A |= (1 << WGM10) | (1 << COM1A1); // Fast PWM, 8 bits
  a0:	e0 e8       	ldi	r30, 0x80	; 128
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	81 68       	ori	r24, 0x81	; 129
  a8:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS11);   // Prescaler 8
  aa:	e1 e8       	ldi	r30, 0x81	; 129
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8a 60       	ori	r24, 0x0A	; 10
  b2:	80 83       	st	Z, r24

	// Inicializar PWM en 0
	OCR1A = 0;
  b4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  b8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  bc:	08 95       	ret

000000be <control_motor>:
}

// Función para controlar el motor
void control_motor(uint8_t speed, uint8_t direction) {
	// Configurar la velocidad del motor (0-255)
	OCR1A = speed;
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	// Configurar la dirección del motor
	if (direction == 0) { // Hacia adelante
  c8:	61 11       	cpse	r22, r1
  ca:	07 c0       	rjmp	.+14     	; 0xda <control_motor+0x1c>
		PORTD |= (1 << IN1_PIN);
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << IN2_PIN);
  d2:	8b b1       	in	r24, 0x0b	; 11
  d4:	87 7f       	andi	r24, 0xF7	; 247
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	08 95       	ret
		} else { // Hacia atrás
		PORTD &= ~(1 << IN1_PIN);
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	8b 7f       	andi	r24, 0xFB	; 251
  de:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << IN2_PIN);
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	08 95       	ret

000000e8 <main>:
	}
}

int main(void) {
	setup_pins();
  e8:	0e 94 40 00 	call	0x80	; 0x80 <setup_pins>
	setup_pwm();
  ec:	0e 94 50 00 	call	0xa0	; 0xa0 <setup_pwm>

	while (1) {
		// Mover motor hacia adelante con velocidad media
		control_motor(128, 0);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	0e 94 5f 00 	call	0xbe	; 0xbe <control_motor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	87 ea       	ldi	r24, 0xA7	; 167
  fc:	91 e6       	ldi	r25, 0x61	; 97
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x16>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x20>
 108:	00 00       	nop
		_delay_ms(2000);

		// Detener motor
		control_motor(0, 0);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 5f 00 	call	0xbe	; 0xbe <control_motor>
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	83 ed       	ldi	r24, 0xD3	; 211
 116:	90 e3       	ldi	r25, 0x30	; 48
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x30>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x3a>
 122:	00 00       	nop
		_delay_ms(1000);

		// Mover motor hacia atrás con velocidad completa
		control_motor(255, 1);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	0e 94 5f 00 	call	0xbe	; 0xbe <control_motor>
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	87 ea       	ldi	r24, 0xA7	; 167
 130:	91 e6       	ldi	r25, 0x61	; 97
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x4a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x54>
 13c:	00 00       	nop
		_delay_ms(2000);

		// Detener motor
		control_motor(0, 1);
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 5f 00 	call	0xbe	; 0xbe <control_motor>
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	83 ed       	ldi	r24, 0xD3	; 211
 14a:	90 e3       	ldi	r25, 0x30	; 48
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x64>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x6e>
 156:	00 00       	nop
 158:	cb cf       	rjmp	.-106    	; 0xf0 <main+0x8>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
